(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{898:function(t,s,e){"use strict";e.r(s);var i=e(1),n=Object(i.a)({},(function(){var t=this,s=t._self._c;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),s("p",[t._v("3.defineProperty(); configurable '是否可以重新define', enumerable:可枚举； value:初始值； writeable：是否可修改.")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),s("p",[t._v("console.log(fragment.childNodes,'转移后的nodes Array-like')")]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),s("p",[s("beiAn")],1)])}),[function(){var t=this._self._c;return t("h1",{attrs:{id:"vue-core"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-core"}},[this._v("#")]),this._v(" vue core")])},function(){var t=this._self._c;return t("h2",{attrs:{id:"mvvm实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvvm实现原理"}},[this._v("#")]),this._v(" MVVM实现原理")])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("数据代理")]),this._v(" "),t("strong",[this._v("模板解析")]),this._v(" "),t("strong",[this._v("数据绑定")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"手写前"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手写前"}},[this._v("#")]),this._v(" 手写前")])},function(){var t=this._self._c;return t("p",[this._v("1."),t("strong",[this._v("[].slice.call()")]),this._v("; //类数组转为数组")])},function(){var t=this._self._c;return t("p",[this._v("2."),t("code",[this._v("js el.nodeType, attrNode.nodeType, textNode.nodeType // dom：1; attr:2; text:3")])])},function(){var t=this._self._c;return t("p",[this._v("4."),t("strong",[this._v("obj.hasOwnProperty(prop)")]),this._v(": 判断prop是否是obj自身的属性")])},function(){var t=this._self._c;return t("p",[this._v("5."),t("strong",[this._v("DocumentFragment")]),this._v(": 文档碎片(高效批量更新多个节点)")])},function(){var t=this._self._c;return t("p",[this._v("document: 对应显示的页面, 包含n个elment  一旦更新document内部的某个元素界面更新\ndocumentFragment: "),t("strong",[this._v("内存中")]),this._v("保存n个element的容器对象("),t("strong",[this._v("不与界面关联")]),this._v("), 如果更新framgnet中的某个element, "),t("strong",[this._v("界面不变")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("while (child = ul.firstChild)")]),this._v(": 做了两个事情：")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("将ul.firstChild取出来；赋值给child;")]),this._v(" "),t("li",[this._v("判断child是否存在")])])},function(){var t=this._self._c;return t("p",[this._v("while ("),t("strong",[this._v("child = ul.firstChild")]),this._v(") { //\n"),t("strong",[this._v("fragment.appendChild(child)")]),this._v("  // 一个节点只能有一个父亲， 先将child从ul中移除, 添加为fragment子节点;注释掉后直接死循环\n//移除之后没有进行ul.appendChild（）时；界面元素将被清空\nconsole.log(fragment, 'ul的结果是啥'); //打印了7次  text li text li text li text  2*dom.length + 1\n};")])},function(){var t=this._self._c;return t("h2",{attrs:{id:"数据代理-proxy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据代理-proxy"}},[this._v("#")]),this._v(" 数据代理 "),t("em",[this._v("proxy()")])])},function(){var t=this,s=t._self._c;return s("ul",[s("li",[s("strong",[t._v("$options")]),t._v(": 将选项对象保存到vm的$options中;\n"),s("code",[t._v("js this.$options = options;")])]),t._v(" "),s("li",[t._v("将"),s("strong",[t._v("data")]),t._v("对象保存到"),s("strong",[t._v("vm和data")]),t._v("变量中;")]),t._v(" "),s("li",[t._v("将"),s("strong",[t._v("vm")]),t._v("保存到"),s("strong",[t._v("me")]),t._v("变量中")]),t._v(" "),s("li",[t._v("遍历data的属性,指定属性进行数据代理:\na.提高Object.defineProperty给VM添加与data对象添加对应的属性描述符。\nb.所有的属性添加get/set;\nc.get/set内部去操作**_data,data**对应的属性数据。")])])}],!1,null,null,null);s.default=n.exports}}]);